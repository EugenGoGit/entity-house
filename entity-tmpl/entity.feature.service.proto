syntax = "proto3";

import "entity.feature.method.proto";
import "entity.feature.options.proto";
import "entity.feature.service.options.proto";

package entity.feature.service;

//
//
//Сущности с генерацией при создании
//    Ключ в DTO сущности строго НЕ помечен REQUIRED
//    Создание единичной - Save POST DTO сущности без ключа, возврат сущности или ошибок
//    Создание списка - Save_List POST repeated DTO сущности без ключа, возврат stream сущности или ошибок
//    Редактирование целиком единичной - Save POST DTO сущности с ключом в body, возврат сущности или ошибок
//    Редактирование целиком списка - Save_List POST repeated DTO сущности с ключом в body, возврат stream сущности или ошибок
//    Редактирование частичное единичной - Edit PATCH DTO сущности с ключом в path, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - Edit_List PATCH repeated DTO сущности с ключом в path, fieldMask в body, возврат stream ошибок
//    Удаление единичной - Delete DELETE в request только ключ, с ключом в path, возврат ошибок
//Удаление списка - Delete_List DELETE c фильтром в query, возврат количества или ошибок
//    Удаление всех - Delete_List DELETE c пустым или отсутствующим фильтром в query, возврат количества или ошибок
//Сущности с созданным вовне ключом
//    Ключ в DTO сущности строго помечен REQUIRED
//    Создание единичной - отсутствует
//    Создание списка - отсутствует
//    Редактирование целиком единичной - Save POST DTO сущности с ключом в body, возврат сущности или ошибок
//    Редактирование целиком списка - Save_List POST repeated DTO сущности с ключом в body, возврат stream сущности или ошибок
//    Редактирование частичное единичной - Edit PATCH DTO сущности с ключом в path, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - Edit_List PATCH repeated DTO сущности с ключом в path, fieldMask в body, возврат stream ошибок
//    Удаление единичной - Delete DELETE в request только ключ, с ключом в path, возврат ошибок
//Удаление списка - Delete_List DELETE c фильтром в query, возврат количества или ошибок
//    Удаление всех - Delete_List DELETE c пустым или отсутствующим фильтром в query, возврат количества или ошибок
//Сущности из уже существующего набора экземпляров сущности, набор поменять нельзя
//    Ключ в DTO сущности строго помечен REQUIRED
//    Создание единичной - отсутствует
//    Создание списка - отсутствует
//    Редактирование целиком единичной - Save POST DTO сущности с ключом в body, возврат сущности или ошибок
//Редактирование целиком списка - Save_List POST repeated DTO сущности с ключом в body, возврат stream сущности или ошибок
//    Редактирование частичное единичной - Edit PATCH DTO сущности с ключом в path, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - Edit_List PATCH repeated DTO сущности с ключом в path, fieldMask в body, возврат stream ошибок
//    Удаление единичной - отсутствует
//    Удаление списка - отсутствует
//    Удаление всех - отсутствует
//    Сущности с только одним экземпляром без ключа (как правило это глобальные параметры)
//    Ключ в DTO сущности отсутствует
//    Создание единичной - отсутствует
//    Создание списка - отсутствует
//    Редактирование целиком единичной - Save POST DTO сущности, возврат сущности или ошибок
//    Редактирование целиком списка - отсутствует
//    Редактирование частичное единичной - Edit PATCH DTO сущности, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - отсутствует
//    Удаление единичной (Очистка параметров) - Delete DELETE, возврат ошибок
//Удаление списка - отсутствует
//    Удаление всех - отсутствует
//Получение единичной - Get GET, возврат сущности
//    Сущности любые
//Реализация пагинации необязательна
//    Методы операции, меняющие состояние cущности, но не атрибуты - Post POST параметры операции с ключом в path, возврат ошибок
//    Методы операции, меняющие состояние сервера, но не атрибуты - Post POST параметры операции, возврат ошибок
//    Получение единичной - Get GET в request только ключ, с ключом в path, возврат сущности
//    Получение списка - Get_List GET c фильтром, пагинацией в query, возврат stream сущности
//Получение количества - Get_Count GET c фильтром в query, возврат количества
//    Получение всех - Get_List GET c пустым или отсутствующим фильтром, пагинацией в query, возврат stream сущности
//    Attach - Put(Link) PUT DTO связи REQUIRED с ключами REQUIRED, ключи в path, attach на конце path, возврат ошибок
//    Detach - Put(UnLink) PUT DTO связи REQUIRED с ключами REQUIRED, ключи в path, attach на конце path, возврат ошибок
//    Получение всех связей - Get_List GET c фильтром, пагинацией в query, возврат stream DTO связи
//    Запрос существования по ключу, по параметрам





// TODO: вынести неиспользуемые в prerelease
// TODO: проверить расширяемость
message ServersideSingletonCRUD {
  option (name) = "{EntityTypeName}Service";
  option (leading_comment) = "Сервис управления сущностью {EntityTypeName}";
  message MethodSet {
    method.Get get = 1;
    method.SaveCreateReplace save_create_replace = 2;
    method.Edit edit = 3;
    method.Delete delete = 4;
  }
  string http_root = 1;
  MethodSet method_set = 2;
  CustomComments custom_comments = 3;
}

// TODO: Определить политики доступа
// TODO: Определить аутентификацию, авторизацию
// TODO: прописать работу с клаймами в запросе, апикей
// TODO: Сделать генерируемый объект связки
// TODO: проверка обязательности полей в LinkType
message ServersideEntityCRUD {
  option (name) = "{EntityTypeName}Service";
  option (leading_comment) = "Сервис управления сущностью {EntityTypeName}";
  message MethodSet {
    method.GetById get = 1;
    method.GetList get_list = 2;
    method.GetCount get_count = 3;
//    method.ExistsKey exists_key = 4;
//    method.Exists exists = 5;
    // .
    oneof save {
      // .
      method.SaveCreateOnly save_create_only = 6;
      method.SaveCreateReplace save_create_replace = 7;
    }
    // .
    oneof save_list {
      // .
      method.SaveListCreateOnly save_list_create_only = 8;
      method.SaveListCreateReplace save_list_create_replace = 9;
    }
    method.EditById edit = 10;
    method.EditList edit_list = 11;
    method.DeleteById delete = 12;
    method.RestoreById restore = 13;
    method.DeleteList delete_list = 14;
    repeated method.Attach attach = 15;
    repeated method.Detach detach = 16;
    repeated method.GetLinkList get_link_list = 17;
    repeated method.GetLinkCount get_link_count = 18;
  }
  string http_root = 1;
  MethodSet method_set = 2;
  // Определение ключевых полей сущности для использования в сервисе
  // Может быть переопределен в методах
  KeyFieldsDefinition key_fields_definition = 3;
  CustomComments custom_comments = 4;
}



