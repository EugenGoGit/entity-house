syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "entity.feature.api.dto.proto";
import "entity.feature.options.proto";
import "entity.feature.api.method.options.proto";
import "google/api/field_behavior.proto";
import "google/api/http.proto";


package entity.feature.api.method;
// TODO: в опции дефолты и сделать RequestTemplate, RequestTemplate в полях метода
extend google.protobuf.MessageOptions {
  dto.RequestTemplate request_template = 2996;
  dto.ResponseTemplate response_template = 2997;
}

// TODO: в опции дефолты, обработать поля метода и переопределить опции
// TODO: примеры на расширяемость
// TODO: общий MethodTemplate с общими полями, может даже его включить в сервис
// TODO: вынести неиспользуемые в prerelease
// TODO: Подстановки сделать не {EntityTypeName}{LinkedTypeName}, а из полей метода и сущности {entity:type_name}{method:linked_type},
// Абстрактный шаблон метода
// На основе этого могут создаваться частные имплементации шаблонов методов
message Method {
  // TODO: Сделать name
  // Имя метода по умолчанию
  // Может быть переопределено полем name
  option (name_template) = "Method{EntityTypeName}";
  // Имя запроса метода по умолчанию
  // Может быть переопределено полем request_name
  option (request_name) = "Method{EntityTypeName}Request";
  // Имя ответа метода по умолчанию
  // Может быть переопределено полем response_name
  option (response_name) = "Method{EntityTypeName}Response";
  // Тело запроса метода по умолчанию
  // Может быть переопределено полем request_template
  option (request_template) = {entity_key:{}};
  // Тело ответа метода по умолчанию
  // Может быть переопределено полем response_template
  option (response_template) = {entity:{}};
  // Комментарий метода по умолчанию
  // Может быть переопределено полем custom_comments.leading_comment
  option (leading_comment) = "Метод для сущности {EntityTypeName}";
  // Опция google.api.HttpRule метода по умолчанию
  // Может быть переопределено полем http_rule
  option (http_rule) = {
    post: "/{HttpRoot}/method",
    body: "*"
  };
  // Строгость (Cardinality) ключевых полей сущности, требуемая для метода
  // Может быть переопределено полем key_field_behavior
  option (key_field_behavior) = FIELD_BEHAVIOR_UNSPECIFIED;
  // Имя сервиса, переопределяет опцию name
  string name_template = 1;
  string request_name = 2;
  string response_name = 3;
  string leading_comment = 4;
  // TODO: сделать подстановки в additional_bindings
  google.api.HttpRule http_rule = 5;
  // TODO: вычислить key_field_behavior для ключевых полей
  // Строгость (Cardinality) ключевых полей, требуемая для метода
  google.api.FieldBehavior key_field_behavior = 6;
  bool server_streaming = 7;
  bool client_streaming = 8;
  // Определение ключевых полей сущности для использования в методе
  // Переопределяет key_fields сервиса
  KeyFieldsDefinition key_fields_definition = 9;
  CustomComments custom_comments = 10;
  // TODO: Переименовать order_by_values
  repeated EnumValue order_by_set = 11;
  string linked_type_name = 12;
  // TODO: подстановка link_key_field_path по аналогии с ключами сущности
  string linked_key_path = 13;
  dto.RequestTemplate request_template = 14;
  dto.ResponseTemplate response_template = 15;
}



