syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "impl.api.service.proto";
import "entity.feature.api.proto";

package impl.api;

extend google.protobuf.MessageOptions {
  Specification specification = 3009 [(entity.feature.api.specification) = "impl.rev1"];
}

// Шаблон спецификации Rev1
message Specification {
  option (entity.feature.api.specification_tmpl) =
  {
    service_tmpl: {
      spec_field_name: "serverside_entity_crud"
      attributes:{
        leading_comment: "Сервис управления сущностью {EntityTypeName}"
        name: "{EntityTypeName}Service"
      }
      method_set: {
        method_tmpl:{
          spec_field_name: "get_by_id"
          attributes:{
            comments:{
              leading_comment: "Метод получения единичной сущности {EntityTypeName} по ключу"
              request_leading_comment: "Запрос получения единичной сущности {EntityTypeName} по ключу"
              response_leading_comment: "Ответ на запрос получения единичной сущности {EntityTypeName} по ключу"
            }
            name:"Get{EntityTypeName}"
            request_name: "Get{EntityTypeName}Request"
            response_name: "Get{EntityTypeName}Response"
            http_rule:{
              get: "/{HttpRoot}/{KeyFields}"
            }
            key_field_behavior: REQUIRED
          }
          request_template: {
            spec_field_name: "entity_key"
          }
          response_template: {
            spec_field_name: "entity_error"
          }
        }
        method_tmpl:{
          spec_field_name: "get_list"
          attributes:{
            comments:{
              leading_comment: "Метод получения списка сущностей {EntityTypeName} по фильтру"
              request_leading_comment: "Запрос получения списка сущностей {EntityTypeName} по фильтру"
              response_leading_comment: "Ответ на запрос получения списка сущностей {EntityTypeName} по фильтру"
            }
            name:"Get{EntityTypeName}List"
            request_name:"Get{EntityTypeName}ListRequest"
            response_name:"Get{EntityTypeName}ListResponse"
            http_rule: {
              get: "/{HttpRoot}/list"
            }
            server_streaming: true
            key_field_behavior: FIELD_BEHAVIOR_UNSPECIFIED
          }
          request_template: {
            spec_field_name: "filter_paging"
          }
          response_template: {
            spec_field_name: "entity_error"
          }
        }
        method_tmpl:{
          spec_field_name: "save_create_replace"
          attributes:{
            comments:{
              leading_comment: "Метод создания/редактирования сущности {EntityTypeName}"
              request_leading_comment: "Запрос на создание/редактирование сущности {EntityTypeName}"
              response_leading_comment: "Ответ на запрос на создание/редактирование сущности {EntityTypeName}"
            }
            name: "Save{EntityTypeName}"
            request_name: "Save{EntityTypeName}Request"
            response_name: "Save{EntityTypeName}Response"
            http_rule: {
              post: "/{HttpRoot}",
              body: "*"
            }
            key_field_behavior: FIELD_BEHAVIOR_UNSPECIFIED
          }
          request_template: {
            spec_field_name: "entity"
          }
          response_template: {
            spec_field_name: "entity_saving_error"
          }
        }
        method_tmpl:{
          spec_field_name: "get_count"
          attributes:{
            comments:{
              leading_comment: "Метод получения количества сущностей {EntityTypeName} по фильтру"
              request_leading_comment: "Запрос получения количества сущностей {EntityTypeName} по фильтру"
              response_leading_comment: "Ответ на запрос получения количества сущностей {EntityTypeName} по фильтру"
            }
            name: "Get{EntityTypeName}Count"
            request_name: "Get{EntityTypeName}CountRequest"
            response_name: "Get{EntityTypeName}CountResponse"
            http_rule: {
              get: "/{HttpRoot}/count"
            }
            key_field_behavior: FIELD_BEHAVIOR_UNSPECIFIED;
          }
          request_template: {
            spec_field_name: "filter"
          }
          response_template: {
            spec_field_name: "count_entity_error"
          }
        }
        method_tmpl:{
          spec_field_name: "get_link_count"
          attributes:{
            comments:{
              leading_comment: "Метод получения количества связей {EntityTypeName} и {LinkedTypeName} по фильтру"
              request_leading_comment: "Запрос получения количества связей {EntityTypeName} и {LinkedTypeName} по фильтру"
              response_leading_comment: "Ответ на запрос получения количества связей {EntityTypeName} и {LinkedTypeName} по фильтру"
            }
            name: "Get{EntityTypeName}{LinkedTypeName}Count"
            request_name: "Get{EntityTypeName}{LinkedTypeName}CountRequest";
            response_name: "Get{EntityTypeName}{LinkedTypeName}CountResponse"
            http_rule: {
              get: "/{HttpRoot}/{LinkedTypeName}/count"
            }
            key_field_behavior: FIELD_BEHAVIOR_UNSPECIFIED
          }
          request_template: {
            spec_field_name: "link_filter"
          }
          response_template: {
            spec_field_name: "count_entity_error"
          }
        }
        method_tmpl:{
          spec_field_name: "get_link_list"
          attributes:{
            comments:{
              leading_comment: "Метод получения списка связей {EntityTypeName} и {LinkedTypeName} по фильтру"
              request_leading_comment: "Запрос получения списка связей {EntityTypeName} и {LinkedTypeName} по фильтру"
              response_leading_comment: "Ответ на запрос получения списка связей {EntityTypeName} и {LinkedTypeName} по фильтру"
            }
            name: "Get{EntityTypeName}{LinkedTypeName}List"
            request_name: "Get{EntityTypeName}{LinkedTypeName}ListRequest"
            response_name: "Get{EntityTypeName}{LinkedTypeName}ListResponse"
            http_rule: {
              get: "/{HttpRoot}/{LinkedTypeName}/list"
            };
            server_streaming: true
          }
          request_template: {
            spec_field_name: "link_filter_paging"
          }
          response_template: {
            spec_field_name: "link_error"
          }
        }
        method_tmpl:{
          spec_field_name: "delete_by_id"
          attributes:{
            comments:{
              leading_comment: "Метод удаления единичной сущности {EntityTypeName} по ключу"
              request_leading_comment: "Запрос удаления единичной сущности {EntityTypeName} по ключу"
              response_leading_comment: "Ответ на запрос удаления единичной сущности {EntityTypeName} по ключу"
            }
            name: "Delete{EntityTypeName}"
            request_name: "Delete{EntityTypeName}Request"
            response_name: "Delete{EntityTypeName}Response"
            http_rule: {
              delete: "/{HttpRoot}/{KeyFields}"
            }
            key_field_behavior: REQUIRED
          }
          request_template: {
            spec_field_name: "entity_key"
          }
          response_template: {
            spec_field_name: "valid_error"
          }
        }
        method_tmpl:{
          spec_field_name: "restore_by_id"
          attributes:{
            comments:{leading_comment: "Метод восстановления удаленной сущности {EntityTypeName} по ключу"
              request_leading_comment: "Запрос восстановления удаленной сущности {EntityTypeName} по ключу"
              response_leading_comment: "Ответ на запрос восстановления удаленной сущности {EntityTypeName} по ключу"
            }
            name: "Post{EntityTypeName}Restore"
            request_name: "Post{EntityTypeName}RestoreRequest"
            response_name: "Post{EntityTypeName}RestoreResponse"
            http_rule: {
              post: "/{HttpRoot}/restore/{KeyFields}"
            }
            key_field_behavior: REQUIRED
          }
          request_template: {
            spec_field_name: "entity_key"
          }
          response_template: {
            spec_field_name: "valid_error"
          }
        }
        method_tmpl:{
          spec_field_name: "attach"
          attributes:{
              comments:{
                leading_comment: "Метод привязки {EntityTypeName} и {LinkedTypeName}"
                request_leading_comment: "Запрос на добавление связи {EntityTypeName} и {LinkedTypeName}";
                response_leading_comment: "Ответ на запрос на добавление связи {EntityTypeName} и {LinkedTypeName}";
              }
            name: "Put{EntityTypeName}{LinkedTypeName}Attach"
            request_name: "Put{EntityTypeName}{LinkedTypeName}AttachRequest"
            response_name: "Put{EntityTypeName}{LinkedTypeName}AttachResponse"
            http_rule: {
              put: "/{HttpRoot}/{LinkKeyFieldPath}/attach"
            }
            key_field_behavior: FIELD_BEHAVIOR_UNSPECIFIED
          }
          request_template: {
            spec_field_name: "link"
          }
          response_template: {
            spec_field_name: "valid_error"
          }
        }
        method_tmpl:{
          spec_field_name: "detach"
          attributes:{
            comments:{
              leading_comment: "Метод отвязки {EntityTypeName} и {LinkedTypeName}"
              request_leading_comment: "Запрос на удаление связи {EntityTypeName} и {LinkedTypeName}"
              response_leading_comment: "Ответ на запрос на удаление связи {EntityTypeName} и {LinkedTypeName}"
            }
            name: "Put{EntityTypeName}{LinkedTypeName}Detach"
            request_name: "Put{EntityTypeName}{LinkedTypeName}DetachRequest"
            response_name: "Put{EntityTypeName}{LinkedTypeName}DetachResponse"
            http_rule: {
              put: "/{HttpRoot}/{LinkKeyFieldPath}/detach"
            }
            key_field_behavior: FIELD_BEHAVIOR_UNSPECIFIED
          }
          request_template: {
            spec_field_name: "link"
          }
          response_template: {
            spec_field_name: "valid_error"
          }
        }
      }
    }
    service_tmpl: {
      spec_field_name: "serverside_singleton_crud"
      attributes:{
        leading_comment: "Сервис управления сущностью {EntityTypeName}"
        name: "{EntityTypeName}Service"
      }
      method_set: {
        method_tmpl:{
          spec_field_name: "get"
          attributes:{
            comments:{
              leading_comment: "Метод получения сущности {EntityTypeName}"
              request_leading_comment: "Запрос получения сущности {EntityTypeName}"
              response_leading_comment: "Ответ на запрос получения сущности {EntityTypeName}"
            }
            name:"Get{EntityTypeName}"
            request_name: "Get{EntityTypeName}Request"
            response_name: "Get{EntityTypeName}Response"
            http_rule:{
              get: "/{HttpRoot}"
            }
          }
          request_template: {
            spec_field_name: "empty"
          }
          response_template: {
            spec_field_name: "entity_error"
          }
        }
      }
    }
  };
  oneof service {
    service.ServersideEntityCRUD serverside_entity_crud = 1;
    service.ServersideSingletonCRUD serverside_singleton_crud = 2;
  }
}

