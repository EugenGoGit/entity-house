syntax = "proto3";


import "google/api/field_behavior.proto";
import "entity.feature.dto.options.proto";

package entity.feature.dto;

// TODO: проверить расширяемость
message RequestTemplate {
  oneof template {
    EntityKey entity_key = 1;
    Entity entity = 2;
    FilterPaging filter_paging = 3;
    LinkFilterPaging link_filter_paging = 4;
    Filter filter = 5;
    LinkFilter link_filter = 6;
    Link link = 7;
  }
}

message ResponseTemplate {
  oneof template {
    EntityWError entity_error = 1;
    EntityList entity_list = 2;
    CountEntityWError count_entity_error = 3;
    ValidError valid_error = 4;
    OneEntityWSavingError one_entity_saving_error = 5;
    Entity entity = 6;
  }
}

message EntityWError {
  message Error {
    option (message_comments) = "Ошибка запроса";
    oneof reason {
      option (oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (oneof_comments) = "Тип ответа";
    ReplaceTypeDummy data = 1 [
      (field_comments) = "{EntityTypeComment}",
      (replace_field_type_to) = "{EntityTypeName}"
    ];
    Error error = 2 [(field_comments) = "Ошибка"];
  }
}

message OneEntityWSavingError {
  message Error {
    option (message_comments) = "Ошибка запроса";
    oneof reason {
      option (oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(field_comments) = "Ошибка валидации"];
      ReplaceTypeDummy saving = 2 [
        (field_comments) = "Ошибка сохранения",
        (replace_field_type_to) = "{EntityTypeName}.SavingError"
      ];
    }
  }
  oneof type {
    option (oneof_comments) = "Тип ответа";
    ReplaceTypeDummy data = 1 [
      (field_comments) = "{EntityTypeComment}",
      (replace_field_type_to) = "{EntityTypeName}"
    ];
    Error error = 2 [(field_comments) = "Ошибка"];
  }
}

message EntityList {
  repeated ReplaceTypeDummy data = 1 [(replace_field_type_to) = "{EntityTypeName}"];
}

message EntityKey {
  ReplaceTypeDummy entity_key = 1 [
    (google.api.field_behavior) = REQUIRED,
    (replace_field_type_to) = "EntityKeyFields"
  ];
}

message Entity {
  ReplaceTypeDummy data = 1 [
    (google.api.field_behavior) = REQUIRED,
    (replace_field_type_to) = "{EntityTypeName}",
    (field_comments) = "{EntityTypeComment}"
  ];
}

message FilterPaging {
  ReplaceTypeDummy filter = 1 [
    (replace_field_type_to) = "{EntityTypeName}Filter",
    (field_comments) = "Фильтр"
  ];
  oneof pagination {
    option (oneof_comments) = "Вариант разбиения на страницы";
    Paging paging = 2 [
      (replace_field_type_to) = "{EntityTypeName}Paging",
      (field_comments) = "Постраничный вывод"
    ];
  }
}

// TODO: Отказаться от отдельного типа для связок
message LinkFilterPaging {
  ReplaceTypeDummy filter = 1 [
    (replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}Filter",
    (field_comments) = "Фильтр"
  ];
  oneof pagination {
    option (oneof_comments) = "Вариант разбиения на страницы";
    LinkPaging paging = 2 [
      (replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}Paging",
      (field_comments) = "Постраничный вывод"
    ];
  }
}

message Filter {
  ReplaceTypeDummy filter = 1 [(replace_field_type_to) =
      "{EntityTypeName}Filter", (field_comments) = "Фильтр"];
}

message LinkFilter {
  ReplaceTypeDummy filter = 1 [(replace_field_type_to) =
      "{EntityTypeName}{LinkedTypeName}Filter", (field_comments) = "Фильтр"];
}

// TODO: Отказаться от отдельного типа для связок
message Link {
  option (message_comments) =
      "Запрос на добавление/удаление связи {EntityTypeName} и {LinkedTypeName}";
  ReplaceTypeDummy data = 1 [
    (replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}",
    (field_comments) = "Связь {EntityTypeName} и {LinkedTypeName}",
    (google.api.field_behavior) = REQUIRED];
}

message Paging {
  option (replace_message_type_name_to) = "{EntityTypeName}Paging";
  option (message_comments) = "Постраничный вывод";
  enum OrderByType {
    option (enum_by_method_attribute) = "order_by_set";
    option (enum_comments) = "Справочник типов значений сортировки.\n# Тип: byte";
    ORDER_BY_TYPE_UNKNOWN = 0 [(enum_value_comments) = "Значение не указано"];
  }
  OrderByType order_by_type = 1 [(field_comments) =
      "Тип значения сортировки.\nЕсли значение не передано, то будет взято значение по умолчанию"];
  enum DirectionType {
    option (enum_comments) = "Справочник типов направлений сортировки.\n # Тип: byte";
    DIRECTION_TYPE_UNKNOWN = 0 [(enum_value_comments) = "Значение не указано"];
    DESC = 1 [(enum_value_comments) = "От большего к меньшему"];
    ASC = 2 [(enum_value_comments) = "От меньшего к большему"];
  }
  DirectionType direction_type = 2 [(field_comments) =
      "Тип направления сортировки.\n# По умолчанию: DESC"];
  int32 limit = 3 [(field_comments) =
      "Количество записей на страницу.\nЕсли значение 0 (не передано), то будет взято значение по умолчанию.\n # Диапазон: 0..100.\n # По умолчанию: 20"];
  int32 offset = 4 [(field_comments) = "Сдвиг.\n# Диапазон: 0..2147483647"];
}

// TODO: Отказаться от отдельного типа для связок
message LinkPaging {
  option (replace_message_type_name_to) = "{EntityTypeName}{LinkedTypeName}Paging";
  option (message_comments) = "Постраничный вывод";
  enum OrderByType {
    option (enum_by_method_attribute) = "order_by_set";
    option (enum_comments) = "Справочник типов значений сортировки.\n# Тип: byte";
    ORDER_BY_TYPE_UNKNOWN = 0 [(enum_value_comments) = "Значение не указано"];
  }
  OrderByType order_by_type = 1 [(field_comments) =
      "Тип значения сортировки.\nЕсли значение не передано, то будет взято значение по умолчанию"];
  enum DirectionType {
    option (enum_comments) = "Справочник типов направлений сортировки.\n # Тип: byte";
    DIRECTION_TYPE_UNKNOWN = 0 [(enum_value_comments) = "Значение не указано"];
    DESC = 1 [(enum_value_comments) = "От большего к меньшему"];
    ASC = 2 [(enum_value_comments) = "От меньшего к большему"];
  }
  DirectionType direction_type = 2 [(field_comments) =
      "Тип направления сортировки.\n# По умолчанию: DESC"];
  int32 limit = 3 [(field_comments) =
      "Количество записей на страницу.\nЕсли значение 0 (не передано), то будет взято значение по умолчанию.\n # Диапазон: 0..100.\n # По умолчанию: 20"];
  int32 offset = 4 [(field_comments) = "Сдвиг.\n# Диапазон: 0..2147483647"];
}

message CountEntityWError {
  message Error {
    option (message_comments) = "Ошибка запроса";
    oneof reason {
      option (oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (oneof_comments) = "Тип ответа";
    int32 data = 1 [(field_comments) = "Всего количество"];
    Error error = 2 [(field_comments) = "Ошибка"];
  }
}

message ValidError {
  message Error {
    option (message_comments) = "Ошибка запроса";
    oneof reason {
      option (oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (oneof_comments) = "Тип ответа";
    Error error = 1 [(field_comments) = "Ошибка"];
  }
}

message ValidationError {
  option (message_comments) =
      "Ошибки валидации.\n Эти проверки выполняются до обращения в базу данных";
  string path = 1 [
    (google.api.field_behavior) = REQUIRED,
    (field_comments) = "Путь к полю в формате наименования прото"
  ];
  string message = 2 [
    (google.api.field_behavior) = REQUIRED,
    (field_comments) = "Валидационное сообщение"
  ];
}








