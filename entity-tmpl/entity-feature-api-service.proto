syntax = "proto3";

import "entity-tmpl/entity-feature-api-options.proto";
import "entity-tmpl/entity-feature-api-method.proto";
import "entity-tmpl/entity-feature-options.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/descriptor.proto";



package entity.feature.api.service;

//
//
//Сущности с генерацией при создании
//    Ключ в DTO сущности строго НЕ помечен REQUIRED
//    Создание единичной - Save POST DTO сущности без ключа, возврат сущности или ошибок
//    Создание списка - Save_List POST repeated DTO сущности без ключа, возврат stream сущности или ошибок
//    Редактирование целиком единичной - Save POST DTO сущности с ключом в body, возврат сущности или ошибок
//    Редактирование целиком списка - Save_List POST repeated DTO сущности с ключом в body, возврат stream сущности или ошибок
//    Редактирование частичное единичной - Edit PATCH DTO сущности с ключом в path, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - Edit_List PATCH repeated DTO сущности с ключом в path, fieldMask в body, возврат stream ошибок
//    Удаление единичной - Delete DELETE в request только ключ, с ключом в path, возврат ошибок
//Удаление списка - Delete_List DELETE c фильтром в query, возврат количества или ошибок
//    Удаление всех - Delete_List DELETE c пустым или отсутствующим фильтром в query, возврат количества или ошибок
//Сущности с созданным вовне ключом
//    Ключ в DTO сущности строго помечен REQUIRED
//    Создание единичной - отсутствует
//    Создание списка - отсутствует
//    Редактирование целиком единичной - Save POST DTO сущности с ключом в body, возврат сущности или ошибок
//    Редактирование целиком списка - Save_List POST repeated DTO сущности с ключом в body, возврат stream сущности или ошибок
//    Редактирование частичное единичной - Edit PATCH DTO сущности с ключом в path, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - Edit_List PATCH repeated DTO сущности с ключом в path, fieldMask в body, возврат stream ошибок
//    Удаление единичной - Delete DELETE в request только ключ, с ключом в path, возврат ошибок
//Удаление списка - Delete_List DELETE c фильтром в query, возврат количества или ошибок
//    Удаление всех - Delete_List DELETE c пустым или отсутствующим фильтром в query, возврат количества или ошибок
//Сущности из уже существующего набора экземпляров сущности, набор поменять нельзя
//    Ключ в DTO сущности строго помечен REQUIRED
//    Создание единичной - отсутствует
//    Создание списка - отсутствует
//    Редактирование целиком единичной - Save POST DTO сущности с ключом в body, возврат сущности или ошибок
//Редактирование целиком списка - Save_List POST repeated DTO сущности с ключом в body, возврат stream сущности или ошибок
//    Редактирование частичное единичной - Edit PATCH DTO сущности с ключом в path, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - Edit_List PATCH repeated DTO сущности с ключом в path, fieldMask в body, возврат stream ошибок
//    Удаление единичной - отсутствует
//    Удаление списка - отсутствует
//    Удаление всех - отсутствует
//    Сущности с только одним экземпляром без ключа (как правило это глобальные параметры)
//    Ключ в DTO сущности отсутствует
//    Создание единичной - отсутствует
//    Создание списка - отсутствует
//    Редактирование целиком единичной - Save POST DTO сущности, возврат сущности или ошибок
//    Редактирование целиком списка - отсутствует
//    Редактирование частичное единичной - Edit PATCH DTO сущности, fieldMask в body, возврат ошибок
//    Редактирование частичное списка - отсутствует
//    Удаление единичной (Очистка параметров) - Delete DELETE, возврат ошибок
//Удаление списка - отсутствует
//    Удаление всех - отсутствует
//Получение единичной - Get GET, возврат сущности
//    Сущности любые
//Реализация пагинации необязательна
//    Методы операции, меняющие состояние cущности, но не атрибуты - Post POST параметры операции с ключом в path, возврат ошибок
//    Методы операции, меняющие состояние сервера, но не атрибуты - Post POST параметры операции, возврат ошибок
//    Получение единичной - Get GET в request только ключ, с ключом в path, возврат сущности
//    Получение списка - Get_List GET c фильтром, пагинацией в query, возврат stream сущности
//Получение количества - Get_Count GET c фильтром в query, возврат количества
//    Получение всех - Get_List GET c пустым или отсутствующим фильтром, пагинацией в query, возврат stream сущности
//    Attach - Put(Link) PUT DTO связи REQUIRED с ключами REQUIRED, ключи в path, attach на конце path, возврат ошибок
//    Detach - Put(UnLink) PUT DTO связи REQUIRED с ключами REQUIRED, ключи в path, attach на конце path, возврат ошибок
//    Получение всех связей - Get_List GET c фильтром, пагинацией в query, возврат stream DTO связи
//    Запрос существования по ключу, по параметрам



// TODO: вынести неиспользуемые в prerelease
message ServersideSingletonCRUD {
  option (entity.feature.api.options.name_template) = "{EntityTypeName}Service";
  option (entity.feature.api.options.service_leading_comment) = "Сервис управления сущностью {EntityTypeName}";
  message MethodSet {
    entity.feature.api.method.GetMethod get_method = 1;
    entity.feature.api.method.SaveMethodCreateReplace save_method_create_replace = 2;
    entity.feature.api.method.EditMethod edit_method = 3;
    entity.feature.api.method.DeleteMethod delete_method = 4;
  }
  string http_root = 1;
  MethodSet method_set = 2;
  CustomComments custom_comments = 3;
}

// TODO: Определить политики доступа
// TODO: Определить аутентификацию, авторизацию
// TODO: прописать работу с клаймами в запросе, апикей
// TODO: Сделать генерируемый объект связки
// TODO: проверка обязательности полей в LinkType
message ServersideEntityCRUD {
  option (entity.feature.api.options.name_template) = "{EntityTypeName}Service";
  option (entity.feature.api.options.service_leading_comment) = "Сервис управления сущностью {EntityTypeName}";
  message MethodSet {
    entity.feature.api.method.GetMethodById get_method = 1;
    entity.feature.api.method.GetListMethod get_list_method = 2;
    entity.feature.api.method.GetCountMethod get_count_method = 3;
    entity.feature.api.method.ExistsKeyMethod exists_key_method = 4;
    entity.feature.api.method.ExistsMethod exists_method = 5;
    // .
    oneof save_method {
      // .
      entity.feature.api.method.SaveMethodCreateOnly save_method_create_only = 6;
      entity.feature.api.method.SaveMethodCreateReplace save_method_create_replace = 7;
    }
    // .
    oneof save_list_method {
      // .
      entity.feature.api.method.SaveListMethodCreateOnly save_list_method_create_only = 8;
      entity.feature.api.method.SaveListMethodCreateReplace save_list_method_create_replace = 9;
    }
    entity.feature.api.method.EditMethodById edit_method = 10;
    entity.feature.api.method.EditListMethod edit_list_method = 11;
    entity.feature.api.method.DeleteMethodById delete_method = 12;
    entity.feature.api.method.RestoreMethodById restore_method = 13;
    entity.feature.api.method.DeleteListMethod delete_list_method = 14;
    repeated entity.feature.api.method.AttachMethod attach_methods = 15;
    repeated entity.feature.api.method.DetachMethod detach_methods = 16;
    repeated entity.feature.api.method.GetLinkListMethod get_link_list_methods = 17;
    repeated entity.feature.api.method.GetLinkCountMethod get_link_count_methods = 18;
  }
  string http_root = 1;
  MethodSet method_set = 2;
  // Определение ключевых полей сущности для использования в сервисе
  // Может быть переопределен в методах
  entity.feature.options.KeyFieldsDefinition key_fields_definition = 3;
  CustomComments custom_comments = 4;
}

message CustomComments {
  // Переопределяет entity.feature.api.options.service_leading_comment
  string leading_comment = 1;
  // Дополнительный комментарий к методу
  string additional_leading_comment = 2;
}
