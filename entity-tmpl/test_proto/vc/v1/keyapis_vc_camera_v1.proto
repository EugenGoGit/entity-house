/*
  Сервис работы с камерами
*/
syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "entity.feature.proto";
import "impl.api.proto";

package keyapis.vc.v1;

option java_package = "ru.keyapis.vc.v1";
option java_outer_classname = "KeyapisVcV1Proto";
option java_multiple_files = false;
option java_string_check_utf8 = true;
option go_package = "/keyapis_vc_v1";
option cc_enable_arenas = true;
option csharp_namespace = "Keyapis.Vc.V1";
option objc_class_prefix = "KEYAPISVCV1";
option php_namespace = "Keyapis\\Vc\\V1";
option ruby_package = "Keyapis::Vc::V1";
option optimize_for = LITE_RUNTIME;

// Сервис работы с камерами
service CameraService {
  // Метод получения RTSP-ссылки по идентификатору камеры в vcfront.
  // Метод доступен для: admin, service.
  // Метод доступен для: ApiKey
  rpc GetCameraRtspUrlExternalId(GetCameraRtspUrlExternalIdRequest) returns (GetCameraRtspUrlExternalIdResponse) {
    option (google.api.http) = {
      get: "/vc/api/v1/camera/rtsp_url/external_id/{external_id}"
    };
  }
}

// Камера
message Camera {
  option (impl.api.specification) = {
    serverside_entity_crud: {
      variables: {
        http_root: "vc/api/v1/camera"
      }
      attributes:{
        override_default:{
          leading_comment: "Сервис работы с камерами"
        }
      }
      key_fields_definition:{
        unique_field_group: PK
      }
      method_set: {
        get_by_id: {
          attributes:{
            override_default:{
              leading_comment:"Метод получения камеры"
              request_leading_comment:"Запрос получения камеры",
              response_leading_comment:"Ответ на запрос получения камеры"
            }
          }
          variables:{
            additional_leading_comment:"Для owner, employee параметр filter.vc_company_id подставляется из токена.\nМетод доступен для: admin, service, bti, owner, employee"
          }
          request_template:{
            entity_key_req_scope:{}
          }
        }
        get_list: {
          attributes:{
            override_default:{
              leading_comment:"Метод получения списка камер"
              request_leading_comment:"Запрос на получение списка камер",
              response_leading_comment:"Ответ на получение списка камер"
            }
          }
          variables:{
            additional_leading_comment:"Для owner, employee параметр filter.vc_company_id подставляется из токена.\nМетод доступен для: admin, service, bti, owner, employee"
          }
          request_template:{
            filter_paging_req_scope:{}
          }
          order_by_values: {name:"UID", title: "По идентификатору"}
        }
        get_count: {
          attributes:{
            override_default:{
              leading_comment:"Метод получения количества камер"
              request_leading_comment:"Запрос на получение количества камер",
              response_leading_comment:"Ответ на получение количества камер"
            }
          }
          variables:{
            additional_leading_comment:"Для owner, employee параметр filter.vc_company_id подставляется из токена.\nМетод доступен для: admin, service, bti, owner, employee"
          }
          request_template:{
            filter_req_scope:{}
          }
        }
        attach: {
          attributes:{
            override_default:{
              leading_comment:"Метод привязки камеры и квартиры"
              request_leading_comment:"Запрос привязки камеры и квартиры",
              response_leading_comment:"Ответ привязки камеры и квартиры"
            }

          }
          variables:{
            additional_leading_comment:"Метод доступен для: admin, service, bti, owner, employee"
          }
          linked_type:{
            name: "Room"
            key_field_path: "{data.camera_uid}/room/{data.orpon}/{data.room_number}"
          }
        }
        detach: {
          attributes:{
            override_default:{
              leading_comment:"Метод отвязки камеры и квартиры"
              request_leading_comment:"Запрос отвязки камеры и квартиры",
              response_leading_comment:"Ответ отвязки камеры и квартиры"
            }

          }
          variables:{
            additional_leading_comment:"Метод доступен для: admin, service, bti, owner, employee"
            linked_type:{
              name: "Room"
              key_field_path: "{data.camera_uid}/room/{data.orpon}/{data.room_number}"
            }
          }
        }
        get_link_list: {
          attributes:{
            override_default:{
              leading_comment:"Метод получения списка связей камеры и квартиры"
              request_leading_comment:"Запрос получения списка связей камеры и квартиры",
              response_leading_comment:"Ответ получения списка связей камеры и квартиры"
            }

          }
          variables:{
            additional_leading_comment:"Метод доступен для: admin, service, bti, owner, employee"
            order_by_values: {name:"CAMERA_UID", title: "По Идентификатору камеры"}
            order_by_values: {name:"ORPON_ROOM_NUMBER", title: "По ОРПОН и номеру квартиры"}
            linked_type:{
              name: "Room"
            }
          }
        }
        get_link_count: {
          attributes:{
            override_default:{
              leading_comment:"Метод получения количества связей камеры и квартиры"
              request_leading_comment:"Запрос получения количества связей камеры и квартиры",
              response_leading_comment:"Ответ получения количества связей камеры и квартиры"
            }

          }
          variables:{
            additional_leading_comment:"Метод доступен для: admin, service, bti, owner, employee"
            linked_type:{
              name: "Room"
            }
          }
        }
      }
    }
  };
  // Идентификатор камеры
  string id = 1;
  // uid камеры
  string uid = 2 [(entity.feature.unique_field_group) = PK];
  // Название камеры
  string name = 3;
  // Признак: онлайн камера или нет
  bool online = 4;
  // Признак: Есть ли у камеры активный пользователь
  bool with_active_user_camera = 5;
  // Дата и время изменения статуса камеры
  string status_changed_since = 6;
  // MAC-адрес камеры
  string mac = 7;
  // IP камеры
  string ip = 8;
  // Внешний IP камеры
  string remote_ip = 9;
  // Дата начала действия текущего тарифа
  string tariff_use_since = 10;
  // Дата окончания действия текущего тарифа
  string tariff_use_till = 11;
  // Наименование тарифа
  string tariff_title = 12;
}

// Фильтр камер
message CameraFilter {
}

// Ограничение выборки камер
message CameraScope {
  // Внешний идентификатор компании
  int32 vc_company_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Фильтр связок камеры и квартиры
message CameraRoomFilter {
  // По Идентификаторам камер
  repeated string uid = 1;
  // По ОРПОНам
  repeated int64 orpons = 2;
  // По номерам квартир
  repeated string room_numbers = 3;
}

message CameraRoom {
  // Идентификатор камеры
  string camera_uid = 1 [(google.api.field_behavior) = REQUIRED];
  // ОРПОН дома
  int64 orpon = 2 [(google.api.field_behavior) = REQUIRED];
  // Номер квартиры.
  // # Диапазон: 1..4
  string room_number = 3 [(google.api.field_behavior) = REQUIRED];
}

// Запрос получения камеры
message GetCameraRtspUrlExternalIdRequest {
  // Идентификатор камеры в vcfront.
  // # Тип: Guid
  string external_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на запрос получения RTSP-ссылки по идентификатору камеры в vcfront
message GetCameraRtspUrlExternalIdResponse {
  // Ошибка запроса получения списка камер
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
  // RTSP-ссылка
  message CameraRtspUrl {
    // RTSP-ссылка
    string rtsp_url = 1;
  }
  // Тип результата
  oneof type {
    // RTSP-ссылка
    CameraRtspUrl data = 1;
    // Ошибка
    Error error = 2;
  }
}

// Ошибки валидации.
// Эти проверки выполняются до обращения в базу данных
message ValidationError {
  // Путь к полю в формате наименования прото
  string path = 1 [(google.api.field_behavior) = REQUIRED];
  // Валидационное сообщение
  string message = 2 [(google.api.field_behavior) = REQUIRED];
}
