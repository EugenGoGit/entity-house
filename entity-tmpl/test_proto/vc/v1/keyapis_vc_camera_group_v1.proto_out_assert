/*
  Сервис управления коллекциями камер
*/
syntax = "proto3";

package keyapis.vc.v1;

import "google/api/annotations.proto";

import "google/api/field_behavior.proto";

import "google/protobuf/timestamp.proto";

import "google/protobuf/wrappers.proto";

option cc_enable_arenas = true;

option csharp_namespace = "Keyapis.Vc.V1";

option go_package = "/keyapis_vc_v1";

option java_multiple_files = false;

option java_outer_classname = "KeyapisVcV1Proto";

option java_package = "ru.keyapis.vc.v1";

option java_string_check_utf8 = true;

option objc_class_prefix = "KEYAPISVCV1";

option optimize_for = LITE_RUNTIME;

option php_namespace = "Keyapis\\Vc\\V1";

option ruby_package = "Keyapis::Vc::V1";

// Коллекция камер
message CameraCollection {
  // Идентификатор коллекции камер.
  // Тип: Guid
  string id = 1;

  // Наименование.
  // Диапазон: 3..256
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  
  // Дата изменения коллекции камер.
  // Поле используется при редактировании и создании для контроля актуальности изменяемой версии
  google.protobuf.Timestamp changed_at = 3 [(google.api.field_behavior) = REQUIRED];
  
  // Идентификатор компании
  int32 company_id = 4 [(google.api.field_behavior) = REQUIRED];

  // Дата удаления коллекции камер.
  // Поле изменяется через методы Delete и Restore
  google.protobuf.Timestamp deleted_at = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Описание.
  // Диапазон: 3..256
  string description = 6;

  // Теги коллекции.
  // Диапазон: 0..10
  repeated string tags = 7;

  // Ошибка сохранения
  message SavingError {
    // Причина ошибки
    oneof reason {
      // Конфликт версий
      Conflict conflict = 1;

      // Попытка сохранить коллекцию камер с company_id не своей компании
      WrongCompanyId wrong_company_id = 2;
    }
    
    // Конфликт версий.
    // Причины:
    // - В базе хранится другая версия строки, значения changed_at отличаются
    message Conflict {
    }
    
    // Попытка сохранить коллекцию камер с company_id не своей компании.
    // Для ролей owner, employee сохранение разрешено только с company_id своей компании
    message WrongCompanyId {
    }
  }
}

// Связка камеры и коллекции камер
message CameraCollectionCamera {
  // Идентификатор коллекции камер.
  // Тип: Guid
  string camera_collection_id = 1 [(google.api.field_behavior) = REQUIRED];
  
  // Идентификатор камеры.
  // Используется идентификатор внешнего сервиса.
  // Тип: Guid
  string external_camera_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// Фильтр для запроса связей камеры и коллекции камер.
// При передаче массива в параметр фильтра элементы массива работают в выборке через ИЛИ.
// При передаче нескольких разных параметров фильтра они работают в выборке через И
message CameraCollectionCameraFilter {
  // По Идентификаторам коллекций камер
  repeated string camera_collection_ids = 1;

  // По Идентификаторам камер
  repeated string external_camera_ids = 2;
}

// Пагинация связей камеры и коллекции камер
message CameraCollectionCameraPaging {
  // Тип значения сортировки.
  // По умолчанию: ID
  OrderByType order_by_type = 1;

  // Тип направления сортировки.
  // По умолчанию: DESC
  DirectionType direction_type = 2;

  // Количество записей на страницу.
  // Минимальное значение: 1.
  // Максимальное значение: 100.
  // По умолчанию: 20.
  // Если значение 0 (не передано), то выставляем значение по умолчанию
  int32 limit = 3;

  // Сдвиг.
  // По умолчанию: 0
  int32 offset = 4;

  // Справочник типов направлений сортировки
  enum DirectionType {
    // Значение не указано
    DIRECTION_TYPE_UNKNOWN = 0;

    // От большего к меньшему
    DESC = 1;

    // От меньшего к большему
    ASC = 2;
  }

  // Справочник типов сортировки
  enum OrderByType {
    // Значение не указано
    ORDER_BY_TYPE_UNKNOWN = 0;

    // По Идентификатору коллекции
    CAMERA_COLLECTION_ID = 1;

    // По Идентификатору камеры
    EXTERNAL_CAMERA_ID = 2;
  }
}

// Фильтр коллекций камер
message CameraCollectionFilter {
  // По тексту.
  // Если значение не передано то поиск по нему не производится.
  // # Диапазон: 3..64.
  // # Поиск производится по полям:
  // # - Наименование.
  // # - Описание.
  // # - Теги коллекции
  string text = 1;

  // По тегам.
  // Диапазон: 0..10
  repeated string tags = 2;

  // По компаниям.
  // Диапазон: 0..10
  repeated int32 company_ids = 3;

  // Показывать удаленные.
  // Если поле не передано, по умолчанию false, фильтр исключает удаленные
  google.protobuf.BoolValue is_deleted = 4;
}

// Постраничный вывод
message CameraCollectionPaging {
  // Тип значения сортировки.
  // Если значение не передано, то будет взято значение по умолчанию.
  // По умолчанию: CHANGED_AT
  OrderByType order_by_type = 1;

  // Тип направления сортировки.
  // По умолчанию: DESC
  DirectionType direction_type = 2;

  // Количество записей на страницу.
  // Если значение 0 (не передано), то будет взято значение по умолчанию.
  // Диапазон: 0..100.
  // По умолчанию: 20
  int32 limit = 3;

  // Сдвиг.
  // Диапазон: 0..2147483647
  int32 offset = 4;

    // Справочник типов направлений сортировки.
  // Тип: byte
  enum DirectionType {
    // Значение не указано
    DIRECTION_TYPE_UNKNOWN = 0;

    // От большего к меньшему
    DESC = 1;

    // От меньшего к большему
    ASC = 2;
  }

  // Справочник типов значений сортировки.
  // Тип: byte
  enum OrderByType {
    // Значение не указано
    ORDER_BY_TYPE_UNKNOWN = 0;

    // По идентификатору
    ID = 1;

    // По имени
    NAME = 2;

    // По времени изменения
    CHANGED_AT = 3;
  }
}

// Запрос удаления коллекции камер
message DeleteCameraCollectionRequest {
  // Идентификатор коллекции камер.
  // Тип: Guid
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на запрос удаления коллекции камер
message DeleteCameraCollectionResponse {
    // Тип ответа
  oneof type {
    // Ошибка
    Error error = 1;
  }

  // Ошибка запроса
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
}

// Запрос получения количества связей камеры и коллекции камер
message GetCameraCollectionCameraCountRequest {
  // Фильтр связей камеры и коллекции камер
  CameraCollectionCameraFilter filter = 1;
}

// Ответ на запрос получения количества связей камеры и коллекции камер
message GetCameraCollectionCameraCountResponse {
    // Тип результата
  oneof type {
    // Всего связей камеры и коллекции камер
    int32 data = 1;

    // Ошибка
    Error error = 2;
  }
  
  // Ошибка запроса
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
}

// Запрос получения списка связей камеры и коллекции камер
message GetCameraCollectionCameraListRequest {
  // Фильтр связей камеры и коллекции камер
  CameraCollectionCameraFilter filter = 1;

  // Вариант разбиения на страницы
  oneof pagination {
    // Пагинация
    CameraCollectionCameraPaging paging = 2;
  }
}

// Ответ на запрос получения списка связей камеры и коллекции камер
message GetCameraCollectionCameraListResponse {
    // Тип результата
  oneof type {
    // Связь камеры и коллекции камер
    CameraCollectionCamera data = 1;

    // Ошибка
    Error error = 2;
  }

  // Ошибка запроса
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
}

// Запрос получения количества коллекций камер
message GetCameraCollectionCountRequest {
  // Фильтр
  CameraCollectionFilter filter = 1;
}

// Ответ на запрос получения количества коллекций камер
message GetCameraCollectionCountResponse {
  // Тип результата
  oneof type {
    // Всего
    int32 data = 1;

        // Ошибка
        Error error = 2;
    }

    // Ошибка запроса
    message Error {
        // Причина ошибки
        oneof reason {
            // Ошибка валидации
            ValidationError validation = 1;
        }
  }
}

// Запрос получения списка коллекций камер
message GetCameraCollectionListRequest {
  // Фильтр
  CameraCollectionFilter filter = 1;

  // Вариант разбиения на страницы
  oneof pagination {
    // Постраничный вывод
    CameraCollectionPaging paging = 2;
  }
}

// Ответ на запрос получения списка коллекций камер
message GetCameraCollectionListResponse {
  // Тип результата
  oneof type {
    // Коллекция камер
    CameraCollection data = 1;

        // Ошибка
        Error error = 2;
    }

    // Ошибка запроса
    message Error {
        // Причина ошибки
        oneof reason {
            // Ошибка валидации
            ValidationError validation = 1;
        }
  }
}

// Запрос получения коллекции камер
message GetCameraCollectionRequest {
  // Идентификатор коллекции камер.
  // Тип: Guid
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на запрос получения коллекции камер
message GetCameraCollectionResponse {
  // Тип результата
  oneof type {
    // Коллекция камер
    CameraCollection data = 1;

    // Ошибка
    Error error = 2;
  }

  // Ошибка запроса
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
}

// Запрос метода GetPet
message GetPetRequest {
    // Идентификатор коллекции камер.
    // Тип: Guid
    string id = 1 [(google.api.field_behavior) = REQUIRED];

    // Наименование.
    // Диапазон: 3..256
    string name = 2 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на запрос метода GetPet
message GetPetResponse {
    // Тип ответа
    oneof type {
        // Животное
        Pet data = 1;

        // Ошибка
        Error error = 2;
    }

    // Ошибка запроса
    message Error {
        // Причина ошибки
        oneof reason {
            // Ошибка валидации
            ValidationError validation = 1;
        }
    }
}

// Животное
message Pet {
    // Идентификатор коллекции камер.
    // Тип: Guid
    string id = 1;

    // Наименование.
    // Диапазон: 3..256
    string name = 2 [(google.api.field_behavior) = REQUIRED];
}

// Запрос восстановления удаленной коллекции камер
message PostCameraCollectionRestoreRequest {
  // Идентификатор коллекции камер.
  // Тип: Guid
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на запрос восстановления удаленной коллекции камер
message PostCameraCollectionRestoreResponse {
  // Тип ответа
  oneof type {
    // Ошибка
    Error error = 1;
  }

  // Ошибка запроса
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
}

// Запрос на добавление связи камеры и коллекции камер
message PutCameraCollectionCameraAttachRequest {
  // Связь камеры и коллекции камер
  CameraCollectionCamera data = 1 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на добавление связи камеры и коллекции камер
message PutCameraCollectionCameraAttachResponse {
    // Тип ответа
  oneof type {
    // Ошибка
    Error error = 1;
  }

  // Ошибка запроса
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
}

// Запрос на удаление связи камеры и коллекции камер
message PutCameraCollectionCameraDetachRequest {
  // Связь камеры и коллекции камер
  CameraCollectionCamera data = 1 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на запрос удаления связи камеры и коллекции камер
message PutCameraCollectionCameraDetachResponse {
    // Тип ответа
  oneof type {
    // Ошибка
    Error error = 1;
  }

  // Ошибка запроса
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;
    }
  }
}

// Запрос на создание коллекции камер
message SaveCameraCollectionRequest {
  // Коллекция камер
  CameraCollection data = 1 [(google.api.field_behavior) = REQUIRED];
}

// Ответ на запрос на создание коллекции камер
message SaveCameraCollectionResponse {
    // Тип ответа
  oneof type {
    // Коллекция камер
    CameraCollection data = 1;

    // Ошибка
    Error error = 2;
  }

  // Ошибка запроса создания
  message Error {
    // Причина ошибки
    oneof reason {
      // Ошибка валидации
      ValidationError validation = 1;

      // Ошибка сохранения
      CameraCollection.SavingError saving = 2;
    }
  }
}

// Ошибки валидации.
// Эти проверки выполняются до обращения в базу данных
message ValidationError {
  // Путь к полю в формате наименования прото
  string path = 1 [(google.api.field_behavior) = REQUIRED];
  
  // Валидационное сообщение
  string message = 2 [(google.api.field_behavior) = REQUIRED];
}

// Сервис управления коллекциями камер
service CameraCollectionService {
  // Метод удаления коллекции камер.
  // Проставляет в поле deleted_at текущую дату.
  // Для owner, employee сравнивается COMPANY_ID из токена и company_id коллекции, при несовпадении ошибка доступа.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc DeleteCameraCollection(DeleteCameraCollectionRequest) returns (DeleteCameraCollectionResponse) {
    option (google.api.http) = { delete: "/vc/api/v1/camera_collection/{id}" };
  }

  // Метод получения коллекции камер.
  // Для owner, employee возвращаются только коллекции камер c COMPANY_ID из токена.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc GetCameraCollection(GetCameraCollectionRequest) returns (GetCameraCollectionResponse) {
    option (google.api.http) = { get: "/vc/api/v1/camera_collection/{id}" };
  }

  // Метод получения количества связей камер и коллекций камер.
  // Для owner, employee возвращаются только коллекции камер c COMPANY_ID из токена.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc GetCameraCollectionCameraCount (GetCameraCollectionCameraCountRequest) returns (GetCameraCollectionCameraCountResponse) {
    option (google.api.http) = { get: "/vc/api/v1/camera_collection/camera/count" };
  }

  // Метод получения списка связей камер и коллекций камер.
  // Для owner, employee возвращаются только коллекции камер c COMPANY_ID из токена.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc GetCameraCollectionCameraList (GetCameraCollectionCameraListRequest) returns (stream GetCameraCollectionCameraListResponse) {
    option (google.api.http) = { get: "/vc/api/v1/camera_collection/camera/list" };
  }

  // Метод получения количества коллекций камер.
  // Для owner, employee возвращаются только коллекции камер c COMPANY_ID из токена.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc GetCameraCollectionCount ( GetCameraCollectionCountRequest ) returns ( GetCameraCollectionCountResponse ) {
    option (google.api.http) = { get: "/vc/api/v1/camera_collection/count" };
  }

  // Метод получения списка коллекций камер.
  // Для owner, employee возвращаются только коллекции камер c COMPANY_ID из токена.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc GetCameraCollectionList ( GetCameraCollectionListRequest ) returns ( stream GetCameraCollectionListResponse ) {
    option (google.api.http) = { get: "/vc/api/v1/camera_collection/list" };
  }

  // Метод восстановления удаленной коллекции камер.
  // Проставляет null в поле deleted_at.
  // Для owner, employee сравнивается COMPANY_ID из токена и company_id коллекции, при несовпадении ошибка доступа.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc PostCameraCollectionRestore ( PostCameraCollectionRestoreRequest ) returns ( PostCameraCollectionRestoreResponse ) {
    option (google.api.http) = {
      post: "/vc/api/v1/camera_collection/restore/{id}"
    };
  }

  // Метод привязки камеры к коллекции камер.
  // Для owner, employee сравнивается COMPANY_ID из токена и company_id коллекции, при несовпадении ошибка доступа.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc PutCameraCollectionCameraAttach ( PutCameraCollectionCameraAttachRequest ) returns ( PutCameraCollectionCameraAttachResponse ) {
    option (google.api.http) = {
      put: "/vc/api/v1/camera_collection/{data.camera_collection_id}/external_camera_id/{data.external_camera_id}/attach"
    };
  }

  // Метод удаления привязки камеры к коллекции камер.
  // Для owner, employee сравнивается COMPANY_ID из токена и company_id коллекции, при несовпадении ошибка доступа.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc PutCameraCollectionCameraDetach ( PutCameraCollectionCameraDetachRequest ) returns ( PutCameraCollectionCameraDetachResponse ) {
    option (google.api.http) = {
      put: "/vc/api/v1/camera_collection/{data.camera_collection_id}/external_camera_id/{data.external_camera_id}/detach"
    };
  }

  // Метод создания и изменения коллекции камер.
  // Для owner, employee сравнивается COMPANY_ID из токена и company_id коллекции, при несовпадении ошибка доступа.
  // Метод доступен для: admin, service, bti, owner, employee
  rpc SaveCameraCollection ( SaveCameraCollectionRequest ) returns ( SaveCameraCollectionResponse ) {
    option (google.api.http) = { post: "/vc/api/v1/camera_collection", body: "*" };
  }
}

// Сервис управления сущностью Pet
service PetService {
    // Метод получения единичной сущности Pet по ключу
    rpc GetPet ( GetPetRequest ) returns ( GetPetResponse ) {
        option (google.api.http) = { get: "/vc/api/v1/pet/id/{id}/name/{name}" };
    }
}
