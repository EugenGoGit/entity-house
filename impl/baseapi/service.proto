syntax = "proto3";

import "impl/baseapi/method.proto";
import "entity_feature/feature.proto";
import "entity_feature/api/service.proto";

package impl.base.api;

// API для сущности с только одним экземпляром, как правило это глобальные параметры системы
message ServersideSingletonCRUD {
  option (entity.feature.api.service.service_tmpl) =
  {
    leading_comment: "Сервис управления сущностью {EntityTypeName}"
    name: "{EntityTypeName}Service"
    key_field_behavior: FIELD_BEHAVIOR_UNSPECIFIED
  };
  message MethodSet {
    Get get = 1;
    SaveCreateReplace save = 2;
    Edit edit = 3;
  }
  MethodSet method_set = 1;
  string leading_comment = 2;
  string http_root = 3;
  string additional_leading_comment = 4;
}

// API для фиксированного набора сущностей внутри системы
message ServersideFixedSet {
  option (entity.feature.api.service.service_tmpl) =
  {
    leading_comment: "Сервис управления сущностью {EntityTypeName}"
    name: "{EntityTypeName}Service"
    key_field_behavior: REQUIRED
  };
  message MethodSet {
    GetById get_by_id = 1;
    // SaveReplace
    // SaveListReplace
    // EditList
    // GetList
    // GetCount
    GetArray get_array = 2;
    EditById edit_by_id = 3;
  }
  MethodSet method_set = 1;
  string leading_comment = 2;
  string http_root = 3;
  string additional_leading_comment = 4;
  entity.feature.KeyFieldsDefinition key_fields_definition = 5;
  // Префикс ключевых полей в http path, на случай вложенной структуры
  string key_field_prefix = 6;
}


// API для сущности создаваемой в системы
message ServersideEntityCRUD {
  option (entity.feature.api.service.service_tmpl) =
  {
    leading_comment: "Сервис управления сущностью {EntityTypeName}"
    name: "{EntityTypeName}Service"
    key_field_behavior: OPTIONAL
  };
  message MethodSet {
    GetById get_by_id = 1;
    oneof get_list_array {
      GetList get_list = 2;
      GetArray get_array = 3;
    }
    GetCount get_count = 4;
    //    ExistsKey exists_key = 4;
    //    Exists exists = 5;
    // .
    oneof save {
      // .
      SaveCreateOnly save_create_only = 5;
      SaveCreateReplace save_create_replace = 6;
    }
    oneof save_list {
      // .
      SaveListCreateOnly save_list_create_only = 7;
      SaveListCreateReplace save_list_create_replace = 8;
    }
    EditById edit_by_id = 9;
    //    EditList edit_list = 11;
    DeleteById delete_by_id = 10;
    RestoreById restore_by_id = 11;
    DeleteList delete_list = 12;
    repeated Attach attach = 13;
    repeated Detach detach = 14;
    repeated GetLinkList get_link_list = 15;
    repeated GetLinkCount get_link_count = 16;
    DeleteListFilter delete_list_filter = 17;
  }
  MethodSet method_set = 1;
  string leading_comment = 2;
  string http_root = 3;
  string additional_leading_comment = 4;
  entity.feature.KeyFieldsDefinition key_fields_definition = 5;
}


// API для сущности созданной и получившей ключ вовне системы
message ClientsideEntityCRUD {
  option (entity.feature.api.service.service_tmpl) =
  {
    leading_comment: "Сервис управления сущностью {EntityTypeName}"
    name: "{EntityTypeName}Service"
    key_field_behavior: REQUIRED
  };
  message MethodSet {
    GetById get_by_id = 1;
    oneof get_list_array {
      GetList get_list = 2;
      GetArray get_array = 3;
    }
    GetCount get_count = 4;
    SaveReplace save_replace = 6;
    SaveListReplace save_list_replace = 8;
    EditById edit_by_id = 9;
    //EditList
    DeleteById delete_by_id = 10;
    RestoreById restore_by_id = 11;
    DeleteList delete_list = 12;
    repeated Attach attach = 13;
    repeated Detach detach = 14;
    repeated GetLinkList get_link_list = 15;
    repeated GetLinkCount get_link_count = 16;
    DeleteListFilter delete_list_filter = 17;
  }
  MethodSet method_set = 1;
  string leading_comment = 2;
  string http_root = 3;
  string additional_leading_comment = 4;
  entity.feature.KeyFieldsDefinition key_fields_definition = 5;
}




