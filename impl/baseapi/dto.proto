syntax = "proto3";


import "google/api/field_behavior.proto";
import "entity_feature/api/dto.proto";
import "google/protobuf/field_mask.proto";

package impl.base.api;


message Empty {
}

message EntityWMask {
  entity.feature.api.dto.ReplaceTypeDummy data = 1 [
    (entity.feature.api.dto.field_comments) = "{EntityTypeComment}",
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
    (google.api.field_behavior) = REQUIRED];
  google.protobuf.FieldMask update_mask = 2 [(entity.feature.api.dto.field_comments) = "Маска полей обновления"];
}

message EntityOneof {
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    entity.feature.api.dto.ReplaceTypeDummy data = 1 [
      (entity.feature.api.dto.field_comments) = "{EntityTypeComment}",
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}"
    ];
  }
}

message EntityWError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    entity.feature.api.dto.ReplaceTypeDummy data = 1 [
      (entity.feature.api.dto.field_comments) = "{EntityTypeComment}",
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}"
    ];
    Error error = 2 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}

message DeletedCountWError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    int32 data = 1 [(entity.feature.api.dto.field_comments) = "Всего количество удаленных"];
    Error error = 2 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}

message DeletedCountWDeletingError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
      entity.feature.api.dto.ReplaceTypeDummy deleting = 2 [
        (entity.feature.api.dto.field_comments) = "Ошибка удаления",
        (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}.DeletingError"
      ];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    int32 data = 1 [(entity.feature.api.dto.field_comments) = "Всего количество удаленных"];
    Error error = 2 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}


message OnlySavingError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
      entity.feature.api.dto.ReplaceTypeDummy saving = 2 [
        (entity.feature.api.dto.field_comments) = "Ошибка сохранения",
        (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}.SavingError"
      ];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    Error error = 1 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}


message EntityWSavingError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
      entity.feature.api.dto.ReplaceTypeDummy saving = 2 [
        (entity.feature.api.dto.field_comments) = "Ошибка сохранения",
        (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}.SavingError"
      ];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    entity.feature.api.dto.ReplaceTypeDummy data = 1 [
      (entity.feature.api.dto.field_comments) = "{EntityTypeComment}",
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}"
    ];
    Error error = 2 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}

message EntityListWSavingError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    entity.feature.api.dto.ReplaceTypeDummy entity_key = 1 [
      (google.api.field_behavior) = REQUIRED,
      (entity.feature.api.dto.field_comments) = "{EntityKeyFieldDescription} сущности {EntityTypeName}, к которой относится ошибка",
      (entity.feature.api.dto.replace_field_type_to) = "EntityKeyFields"
    ];
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 2 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
      entity.feature.api.dto.ReplaceTypeDummy saving = 3 [
        (entity.feature.api.dto.field_comments) = "Ошибка сохранения",
        (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}.SavingError"
      ];
    }
  }
  repeated entity.feature.api.dto.ReplaceTypeDummy data = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
    (entity.feature.api.dto.field_comments) = "Список {EntityTypeName}"
  ];
  repeated Error errors = 2 [(entity.feature.api.dto.field_comments) = "Список ошибок"];
}


message EntityListWError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    entity.feature.api.dto.ReplaceTypeDummy entity_key = 1 [
      (google.api.field_behavior) = REQUIRED,
      (entity.feature.api.dto.field_comments) = "{EntityKeyFieldDescription} сущности {EntityTypeName}, к которой относится ошибка",
      (entity.feature.api.dto.replace_field_type_to) = "EntityKeyFields"
    ];
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 2 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  repeated entity.feature.api.dto.ReplaceTypeDummy data = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
    (entity.feature.api.dto.field_comments) = "Список {EntityTypeName}"
  ];
  repeated Error errors = 2 [(entity.feature.api.dto.field_comments) = "Список ошибок"];
}

message EntityArrayCountError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  message Data {
    option (entity.feature.api.dto.message_comments) = "Список";
    repeated entity.feature.api.dto.ReplaceTypeDummy items = 1 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
      (entity.feature.api.dto.field_comments) = "Список {EntityTypeName}"
    ];
    int32 total = 2 [
      (entity.feature.api.dto.field_comments) = "Всего количество"
    ];
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    Data data = 1 [
      (entity.feature.api.dto.field_comments) = "Список"
    ];
    Error error = 2 [
      (entity.feature.api.dto.field_comments) = "Ошибка"
    ];
  }
}


message EntityArrayError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  repeated entity.feature.api.dto.ReplaceTypeDummy items = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
    (entity.feature.api.dto.field_comments) = "Список {EntityTypeName}"
  ];
  Error error = 2 [
    (entity.feature.api.dto.field_comments) = "Ошибка"
  ];
}


message EntityList {
  repeated entity.feature.api.dto.ReplaceTypeDummy data = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
    (entity.feature.api.dto.field_comments) = "Список {EntityTypeName}"
  ];
}

message EntityKey {
  entity.feature.api.dto.ReplaceTypeDummy entity_key = 1 [
    (google.api.field_behavior) = REQUIRED,
    (entity.feature.api.dto.replace_field_type_to) = "EntityKeyFields"
  ];
}

message EntityKeyArray {
  repeated entity.feature.api.dto.ReplaceTypeDummy entity_key = 1 [
    (google.api.field_behavior) = REQUIRED,
    (entity.feature.api.dto.replace_field_type_to) = "EntityKeyFields"
  ];
}

message EntityKeyScope {
  entity.feature.api.dto.ReplaceTypeDummy scope = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Scope"
  ];
  entity.feature.api.dto.ReplaceTypeDummy entity_key = 2 [
    (google.api.field_behavior) = REQUIRED,
    (entity.feature.api.dto.replace_field_type_to) = "EntityKeyFields"
  ];
}

message EntityKeyReqScope {
  entity.feature.api.dto.ReplaceTypeDummy scope = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Scope",
    (google.api.field_behavior) = REQUIRED
  ];
  entity.feature.api.dto.ReplaceTypeDummy entity_key = 2 [
    (google.api.field_behavior) = REQUIRED,
    (entity.feature.api.dto.replace_field_type_to) = "EntityKeyFields"
  ];
}


message Entity {
  entity.feature.api.dto.ReplaceTypeDummy data = 1 [
    (google.api.field_behavior) = REQUIRED,
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
    (entity.feature.api.dto.field_comments) = "{EntityTypeComment}"
  ];
}

message EntityNReq {
  entity.feature.api.dto.ReplaceTypeDummy data = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}",
    (entity.feature.api.dto.field_comments) = "{EntityTypeComment}"
  ];
}

message FilterPaging {
  entity.feature.api.dto.ReplaceTypeDummy filter = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Filter"
  ];
  oneof pagination {
    option (entity.feature.api.dto.oneof_comments) = "Вариант разбиения на страницы";
    Paging paging = 2 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Paging",
      (entity.feature.api.dto.field_comments) = "Постраничный вывод"
    ];
  }
}

message PagingOnly {
  oneof pagination {
    option (entity.feature.api.dto.oneof_comments) = "Вариант разбиения на страницы";
    Paging paging = 1 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Paging",
      (entity.feature.api.dto.field_comments) = "Постраничный вывод"
    ];
  }
}

message PagingOffsetOnly {
  oneof pagination {
    option (entity.feature.api.dto.oneof_comments) = "Вариант разбиения на страницы";
    OffsetOnly paging = 1 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Paging",
      (entity.feature.api.dto.field_comments) = "Постраничный вывод"
    ];
  }
}

message FilterPagingScope {
  entity.feature.api.dto.ReplaceTypeDummy scope = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Scope"
  ];
  entity.feature.api.dto.ReplaceTypeDummy filter = 2 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Filter"
  ];
  oneof pagination {
    option (entity.feature.api.dto.oneof_comments) = "Вариант разбиения на страницы";
    Paging paging = 3 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Paging",
      (entity.feature.api.dto.field_comments) = "Постраничный вывод"
    ];
  }
}


message FilterPagingReqScope {
  entity.feature.api.dto.ReplaceTypeDummy scope = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Scope",
    (google.api.field_behavior) = REQUIRED
  ];
  entity.feature.api.dto.ReplaceTypeDummy filter = 2 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Filter"
  ];
  oneof pagination {
    option (entity.feature.api.dto.oneof_comments) = "Вариант разбиения на страницы";
    Paging paging = 3 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Paging",
      (entity.feature.api.dto.field_comments) = "Постраничный вывод"
    ];
  }
}

// TODO: Отказаться от отдельного типа для связок
message LinkFilterPaging {
  entity.feature.api.dto.ReplaceTypeDummy filter = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}Filter"
  ];
  oneof pagination {
    option (entity.feature.api.dto.oneof_comments) = "Вариант разбиения на страницы";
    LinkPaging paging = 2 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}Paging",
      (entity.feature.api.dto.field_comments) = "Постраничный вывод"
    ];
  }
}

message Filter {
  entity.feature.api.dto.ReplaceTypeDummy filter = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Filter"
  ];
}

message FilterScope {
  entity.feature.api.dto.ReplaceTypeDummy scope = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Scope"
  ];
  entity.feature.api.dto.ReplaceTypeDummy filter = 2 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Filter"
  ];
}

message FilterReqScope {
  entity.feature.api.dto.ReplaceTypeDummy scope = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Scope",
    (google.api.field_behavior) = REQUIRED
  ];
  entity.feature.api.dto.ReplaceTypeDummy filter = 2 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}Filter"
  ];
}

message LinkFilter {
  entity.feature.api.dto.ReplaceTypeDummy filter = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}Filter"
  ];
}

// TODO: Отказаться от отдельного типа для связок
message Link {
  entity.feature.api.dto.ReplaceTypeDummy data = 1 [
    (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}",
    (google.api.field_behavior) = REQUIRED];
}

message LinkWError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    entity.feature.api.dto.ReplaceTypeDummy data = 1 [
      (entity.feature.api.dto.replace_field_type_to) = "{EntityTypeName}{LinkedTypeName}"
    ];
    Error error = 2 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}

message OffsetOnly {
  option (entity.feature.api.dto.replace_message_type_name_to) = "{EntityTypeName}Paging";
  option (entity.feature.api.dto.message_comments) = "Постраничный вывод";
  int32 limit = 1 [(entity.feature.api.dto.field_comments) =
      "Количество записей на страницу.\nЕсли значение 0 (не передано), то будет взято значение по умолчанию.\n # Диапазон: 0..100.\n # По умолчанию: 20"];
  int32 offset = 2 [(entity.feature.api.dto.field_comments) = "Сдвиг.\n# Диапазон: 0..2147483647"];
}

message Paging {
  option (entity.feature.api.dto.replace_message_type_name_to) = "{EntityTypeName}Paging";
  option (entity.feature.api.dto.message_comments) = "Постраничный вывод";
  enum OrderByType {
    option (entity.feature.api.dto.enum_by_method_attribute) = "order_by_values";
    option (entity.feature.api.dto.enum_comments) = "Справочник типов значений сортировки.\n# Тип: byte";
    ORDER_BY_TYPE_UNKNOWN = 0 [(entity.feature.api.dto.enum_value_comments) = "Значение не указано"];
  }
  OrderByType order_by_type = 1 [(entity.feature.api.dto.field_comments) =
      "Тип значения сортировки.\nЕсли значение не передано, то будет взято значение по умолчанию"];
  enum DirectionType {
    option (entity.feature.api.dto.enum_comments) = "Справочник типов направлений сортировки.\n # Тип: byte";
    DIRECTION_TYPE_UNKNOWN = 0 [(entity.feature.api.dto.enum_value_comments) = "Значение не указано"];
    DESC = 1 [(entity.feature.api.dto.enum_value_comments) = "От большего к меньшему"];
    ASC = 2 [(entity.feature.api.dto.enum_value_comments) = "От меньшего к большему"];
  }
  DirectionType direction_type = 2 [(entity.feature.api.dto.field_comments) =
      "Тип направления сортировки.\n# По умолчанию: DESC"];
  int32 limit = 3 [(entity.feature.api.dto.field_comments) =
      "Количество записей на страницу.\nЕсли значение 0 (не передано), то будет взято значение по умолчанию.\n # Диапазон: 0..100.\n # По умолчанию: 20"];
  int32 offset = 4 [(entity.feature.api.dto.field_comments) = "Сдвиг.\n# Диапазон: 0..2147483647"];
}

// TODO: Отказаться от отдельного типа для связок
message LinkPaging {
  option (entity.feature.api.dto.replace_message_type_name_to) = "{EntityTypeName}{LinkedTypeName}Paging";
  option (entity.feature.api.dto.message_comments) = "Постраничный вывод";
  enum OrderByType {
    option (entity.feature.api.dto.enum_by_method_attribute) = "order_by_values";
    option (entity.feature.api.dto.enum_comments) = "Справочник типов значений сортировки.\n# Тип: byte";
    ORDER_BY_TYPE_UNKNOWN = 0 [(entity.feature.api.dto.enum_value_comments) = "Значение не указано"];
  }
  OrderByType order_by_type = 1 [(entity.feature.api.dto.field_comments) =
      "Тип значения сортировки.\nЕсли значение не передано, то будет взято значение по умолчанию"];
  enum DirectionType {
    option (entity.feature.api.dto.enum_comments) = "Справочник типов направлений сортировки.\n # Тип: byte";
    DIRECTION_TYPE_UNKNOWN = 0 [(entity.feature.api.dto.enum_value_comments) = "Значение не указано"];
    DESC = 1 [(entity.feature.api.dto.enum_value_comments) = "От большего к меньшему"];
    ASC = 2 [(entity.feature.api.dto.enum_value_comments) = "От меньшего к большему"];
  }
  DirectionType direction_type = 2 [(entity.feature.api.dto.field_comments) =
      "Тип направления сортировки.\n# По умолчанию: DESC"];
  int32 limit = 3 [(entity.feature.api.dto.field_comments) =
      "Количество записей на страницу.\nЕсли значение 0 (не передано), то будет взято значение по умолчанию.\n # Диапазон: 0..100.\n # По умолчанию: 20"];
  int32 offset = 4 [(entity.feature.api.dto.field_comments) = "Сдвиг.\n# Диапазон: 0..2147483647"];
}

message CountEntityWError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    int32 data = 1 [(entity.feature.api.dto.field_comments) = "Всего количество"];
    Error error = 2 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}


message CountEntity {
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    int32 data = 1 [(entity.feature.api.dto.field_comments) = "Всего количество"];
  }
}

message DeletedCount {
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    int32 data = 1 [(entity.feature.api.dto.field_comments) = "Всего количество удаленных"];
  }
}


message OnlyValidError {
  message Error {
    option (entity.feature.api.dto.message_comments) = "Ошибка запроса";
    oneof reason {
      option (entity.feature.api.dto.oneof_comments) = "Причина ошибки";
      ValidationError validation = 1 [(entity.feature.api.dto.field_comments) = "Ошибка валидации"];
    }
  }
  oneof type {
    option (entity.feature.api.dto.oneof_comments) = "Тип ответа";
    Error error = 1 [(entity.feature.api.dto.field_comments) = "Ошибка"];
  }
}

message ValidationError {
  option (entity.feature.api.dto.message_comments) =
      "Ошибки валидации.\n Эти проверки выполняются до обращения в базу данных";
  string path = 1 [
    (google.api.field_behavior) = REQUIRED,
    (entity.feature.api.dto.field_comments) = "Путь к полю в формате наименования прото"
  ];
  string message = 2 [
    (google.api.field_behavior) = REQUIRED,
    (entity.feature.api.dto.field_comments) = "Валидационное сообщение"
  ];
}








